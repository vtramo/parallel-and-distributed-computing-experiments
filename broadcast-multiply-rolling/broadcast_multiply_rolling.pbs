#!/bin/bash

#PBS -q studenti
#PBS -l nodes=8:ppn=8
#PBS -N broadcast_multiply_rolling
#PBS -o broadcast_multiply_rolling.out
#PBS -e broadcast_multiply_rolling.err

sort -u $PBS_NODEFILE > hostlist
NCPU=$(wc -l hostlist)

echo -----------------------------
echo 'This job is allocated on '${NCPU}' cpu(s)'
echo 'Job is running on node(s):'
cat hostlist
PBS_O_WORKDIR=$PBS_O_HOME/broadcast-multiply-rolling
echo ------------------------------------------
echo PBS: qsub is running on $PBS_O_HOST
echo PBS: originating queue is $PBS_O_QUEUE
echo PBS: executing queue is $PBS_QUEUE
echo PBS: working directory is $PBS_O_WORKDIR
echo PBS: execution mode is $PBS_ENVIRONMENT
echo PBS: job identifier is $PBS_JOBID
echo PBS: job name is $PBS_JOBNAME
echo PBS: node file is $PBS_NODEFILE
echo PBS: current home directory is $PBS_O_HOME
echo PBS: PATH = $PBS_O_PATH
echo -----------------------------------------

TOT_ITERATIONS=10
FILENAME_RESULTS="$PBS_O_WORKDIR/results.txt"

result_bmr=""
result_mxm=""
time_bmr=0
time_mxm=0

set PRINT_MODE="$PRINT_MODE"

function execute_bmr() {
    /usr/lib64/openmpi/1.4-gcc/bin/mpicc -o $PBS_O_WORKDIR/bmr $PBS_O_WORKDIR/broadcast_multiply_rolling.c -std=c99

    for ((i = 0; i < $TOT_ITERATIONS; i++)); do
        result_bmr=$(/usr/lib64/openmpi/1.4-gcc/bin/mpiexec -machinefile hostlist -x PRINT_MODE=$PRINT_MODE -n $PROCESSES $PBS_O_WORKDIR/bmr $GRID_COMM_DIM $square_matrix_dim)
        this_time=$(echo "$result_bmr" | grep "TIME" | awk '{print $4}')
        time_bmr=$(awk -v a="$this_time" -v b="$time_bmr" 'BEGIN{print (a + b)}')
    done

    time_bmr=$(awk -v a="$time_bmr" -v b="$TOT_ITERATIONS" 'BEGIN{print (a / b)}')
    echo "$result_bmr"
    rm $PBS_O_WORKDIR/bmr
}

function execute_mxm() {
    gcc -o $PBS_O_WORKDIR/mxm $PBS_O_WORKDIR/single_process_matrix_per_matrix_product.c -std=c99

    for ((i = 0; i < $TOT_ITERATIONS; i++)); do
        result_mxm=$($PBS_O_WORKDIR/mxm $square_matrix_dim)
        this_time=$(echo "$result_mxm" | grep "TIME" | awk '{print $5}')
        time_mxm=$(awk -v a="$this_time" -v b="$time_mxm" 'BEGIN{print (a + b)}')
    done

    time_mxm=$(awk -v a="$time_mxm" -v b="$TOT_ITERATIONS" 'BEGIN{print (a / b)}')
    echo "$result_mxm"
    rm $PBS_O_WORKDIR/mxm
}

execute_bmr
execute_mxm

if [[ ! -e "$FILENAME_RESULTS" ]]; then
    printf "PARALLEL_TIME\tSINGLEP_TIME\tSPEED_UP\tTOTAL_PROCESSES\tSQUARE DIM\tGRID_COMM_DIMS\tTOT_NUMBERS\tTOT_ITERATIONS" > $FILENAME_RESULTS
fi

speed_up=$(awk -v a="$time_mxm" -v b="$time_bmr" 'BEGIN{print (a / b)}')
printf "$time_bmr\t$time_mxm\t$speed_up\t$PROCESSES\t$square_matrix_dim\t${GRID_COMM_DIM}x${GRID_COMM_DIM}\t$(($square_matrix_dim * $square_matrix_dim))\t$TOT_ITERATIONS\n" >> $FILENAME_RESULTS